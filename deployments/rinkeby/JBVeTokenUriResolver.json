{
  "address": "0x1a3226Cc7Fbf837Fa4c327ECE00ae5b5a083a1AE",
  "abi": [
    {
      "inputs": [],
      "name": "INSUFFICIENT_BALANCE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_DURATION",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "getTokenDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getTokenRange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x082d5d832130d6ae966adea7a52a5a0e19e39ff868739ccdef594ce92a481d59",
  "receipt": {
    "to": null,
    "from": "0x283e4500fd7C9E1BF83b828f13A597b47311700C",
    "contractAddress": "0x1a3226Cc7Fbf837Fa4c327ECE00ae5b5a083a1AE",
    "transactionIndex": 0,
    "gasUsed": "781336",
    "logsBloom": "0x
    "blockHash": "0xa9cbab3ed333774f440dfc6d1c46b6f75fa02fe10ef38590d01579c425e74967",
    "transactionHash": "0x082d5d832130d6ae966adea7a52a5a0e19e39ff868739ccdef594ce92a481d59",
    "logs": [],
    "blockNumber": 10305941,
    "cumulativeGasUsed": "781336",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "75d946f03e257c9f76e85b0eb9efe831",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"INSUFFICIENT_BALANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_DURATION\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"getTokenDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getTokenRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getTokenDuration(uint256)\":{\"params\":{\"_duration\":\"Time in seconds corresponding with one of five acceptable staking durations.  The Staking durations below were gleaned from the JBveBanny.sol contract line 55-59. Returns the duration multiplier used to index into the proper veBanny mediallion on IPFS.\"}},\"getTokenRange(uint256)\":{\"params\":{\"_amount\":\"Amount of locked Juicebox.      The range values referenced below were gleaned from the following Notion URL.  https://www.notion.so/juicebox/veBanny-proposal-from-Jango-2-68c6f578bef84205a9f87e3f1057aa37 Returns the token range index or veBanny character commensurate with amount of locked Juicebox.\"}},\"tokenURI(uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of locked Juicebox. \",\"_duration\":\"Duration in seconds to stake Juicebox. Returns one of the epic and totally righteous veBanny character IPFS URI the user is entitled to with the aforementioned parameters.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTokenDuration(uint256)\":{\"notice\":\"Returns the token duration multiplier needed to index into the righteous veBanny mediallion background.\"},\"getTokenRange(uint256)\":{\"notice\":\"Returns the veBanny character index needed to compute the righteous veBanny on IPFS.\"},\"tokenURI(uint256,uint256)\":{\"notice\":\"Computes the specific veBanny IPFS URI  based on the above locked Juicebox token range index and the duration multiplier.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/JBVeTokenUriResolver.sol\":\"JBVeTokenUriResolver\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/JBConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\n/**\\n  @notice\\n  Global constants used across multiple Juicebox contracts.\\n*/\\nlibrary JBConstants {\\n  /**\\n    @notice\\n    Maximum value for reserved, redemption, and ballot redemption rates. Does not include discount rate.\\n  */\\n  uint256 public constant MAX_RESERVED_RATE = 10000;\\n\\n  /**\\n    @notice maximum token redemption rate.\\n    */\\n  uint256 public constant MAX_REDEMPTION_RATE = 10000;\\n\\n  /**\\n    @notice\\n    A funding cycle's discount rate is expressed as a percentage out of 1000000000.\\n  */\\n  uint256 public constant MAX_DISCOUNT_RATE = 1000000000;\\n\\n  /**\\n    @notice\\n    Maximum splits percentage.\\n  */\\n  uint256 public constant SPLITS_TOTAL_PERCENT = 1000000000;\\n\\n  /**\\n    @notice\\n    Maximum fee rate as a percentage out of 1000000000\\n  */\\n  uint256 public constant MAX_FEE = 1000000000;\\n\\n  /**\\n    @notice\\n    Maximum discount on fee granted by a gauge.\\n  */\\n  uint256 public constant MAX_FEE_DISCOUNT = 1000000000;\\n\\n  /**\\n    @notice\\n    A thousand days in seconds, 60 seconds * 60 minutes * 24 hours * 1000 days.\\n  */\\n  uint256 public constant ONE_THOUSAND_DAYS = 86400000;\\n\\n  /**\\n    @notice\\n    Two hundred and fifty days in seconds, 60 seconds * 60 minutes * 24 hours * 250 days.\\n  */\\n  uint256 public constant TWO_HUNDRED_FIFTY_DAYS = 21600000;\\n\\n  /**\\n    @notice\\n    One hundred days in seconds, 60 seconds * 60 minutes * 24 hours * 100 days.\\n  */\\n  uint256 public constant ONE_HUNDRED_DAYS = 8640000;\\n\\n  /**\\n    @notice\\n    Twenty-five days in seconds, 60 seconds * 60 minutes * 24 hours * 25 days.\\n  */\\n  uint256 public constant TWENTY_FIVE_DAYS = 2160000;\\n\\n  /**\\n    @notice\\n    Ten days in seconds, 60 seconds * 60 minutes * 24 hours * 10 days.\\n  */\\n  uint256 public constant TEN_DAYS = 864000;\\n}\\n\",\"keccak256\":\"0xf6e6a6253ccd6476f530c3e5eeee0f1b3a66278e4ca3d1a52daa35d3977e0866\",\"license\":\"MIT\"},\"contracts/JBErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\n//*********************************************************************//\\n// --------------------------- custom errors ------------------------- //\\n//*********************************************************************//\\n\\nerror INVALID_ACCOUNT();\\nerror INSUFFICIENT_BALANCE();\\nerror INSUFFICIENT_ALLOWANCE();\\nerror LOCK_PERIOD_NOT_OVER();\\nerror INVALID_DURATION();\\nerror TOKEN_MISMATCH();\\nerror INVALID_LOCK_EXTENSION();\",\"keccak256\":\"0x18a342ec3ca7607e7cb50d781b7bc0b9df378ae5fee1aa805e178388b04b3ba3\",\"license\":\"MIT\"},\"contracts/JBVeTokenUriResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\n\\nimport './JBConstants.sol';\\nimport './JBErrors.sol';\\n\\ncontract JBVeTokenUriResolver {\\n  using SafeMath for uint256;\\n\\n  /**\\n     @notice Returns the veBanny character index needed to compute the righteous veBanny on IPFS.\\n     @param _amount Amount of locked Juicebox.     \\n     The range values referenced below were gleaned from the following Notion URL. \\n     https://www.notion.so/juicebox/veBanny-proposal-from-Jango-2-68c6f578bef84205a9f87e3f1057aa37\\n     Returns the token range index or veBanny character commensurate with amount of locked Juicebox.\\n  */\\n  function getTokenRange(uint256 _amount) public pure returns (uint256) {\\n    if (_amount <= 0) {\\n      revert INSUFFICIENT_BALANCE();\\n    }\\n    uint256 tokenRange = 0;\\n    if (_amount >= 1 && _amount <= 100) {\\n      tokenRange = 1;\\n    } else if (_amount >= 101 && _amount <= 200) {\\n      tokenRange = 2;\\n    } else if (_amount >= 201 && _amount <= 300) {\\n      tokenRange = 3;\\n    } else if (_amount >= 401 && _amount <= 500) {\\n      tokenRange = 4;\\n    } else if (_amount >= 501 && _amount <= 600) {\\n      tokenRange = 5;\\n    } else if (_amount >= 601 && _amount <= 700) {\\n      tokenRange = 6;\\n    } else if (_amount >= 701 && _amount <= 800) {\\n      tokenRange = 7;\\n    } else if (_amount >= 801 && _amount <= 900) {\\n      tokenRange = 8;\\n    } else if (_amount >= 901 && _amount <= 1000) {\\n      tokenRange = 9;\\n    } else if (_amount >= 1001 && _amount <= 2000) {\\n      tokenRange = 10;\\n    } else if (_amount >= 2001 && _amount <= 3000) {\\n      tokenRange = 11;\\n    } else if (_amount >= 3001 && _amount <= 4000) {\\n      tokenRange = 12;\\n    } else if (_amount >= 4001 && _amount <= 5000) {\\n      tokenRange = 13;\\n    } else if (_amount >= 5001 && _amount <= 6000) {\\n      tokenRange = 14;\\n    } else if (_amount >= 6001 && _amount <= 7000) {\\n      tokenRange = 15;\\n    } else if (_amount >= 7001 && _amount <= 8000) {\\n      tokenRange = 16;\\n    } else if (_amount >= 8001 && _amount <= 9000) {\\n      tokenRange = 17;\\n    } else if (_amount >= 9001 && _amount <= 10000) {\\n      tokenRange = 18;\\n    } else if (_amount >= 10001 && _amount <= 12000) {\\n      tokenRange = 19;\\n    } else if (_amount >= 12001 && _amount <= 14000) {\\n      tokenRange = 20;\\n    } else if (_amount >= 14001 && _amount <= 16000) {\\n      tokenRange = 21;\\n    } else if (_amount >= 16001 && _amount <= 18000) {\\n      tokenRange = 22;\\n    } else if (_amount >= 18001 && _amount <= 20000) {\\n      tokenRange = 23;\\n    } else if (_amount >= 20001 && _amount <= 22000) {\\n      tokenRange = 24;\\n    } else if (_amount >= 22001 && _amount <= 24000) {\\n      tokenRange = 25;\\n    } else if (_amount >= 24001 && _amount <= 26000) {\\n      tokenRange = 26;\\n    } else if (_amount >= 26001 && _amount <= 28000) {\\n      tokenRange = 27;\\n    } else if (_amount >= 28001 && _amount <= 30000) {\\n      tokenRange = 28;\\n    } else if (_amount >= 30001 && _amount <= 40000) {\\n      tokenRange = 29;\\n    } else if (_amount >= 40001 && _amount <= 50000) {\\n      tokenRange = 30;\\n    } else if (_amount >= 50001 && _amount <= 60000) {\\n      tokenRange = 31;\\n    } else if (_amount >= 60001 && _amount <= 70000) {\\n      tokenRange = 32;\\n    } else if (_amount >= 70001 && _amount <= 80000) {\\n      tokenRange = 33;\\n    } else if (_amount >= 80001 && _amount <= 90000) {\\n      tokenRange = 34;\\n    } else if (_amount >= 90001 && _amount <= 100000) {\\n      tokenRange = 35;\\n    } else if (_amount >= 100001 && _amount <= 200000) {\\n      tokenRange = 36;\\n    } else if (_amount >= 200001 && _amount <= 300000) {\\n      tokenRange = 37;\\n    } else if (_amount >= 300001 && _amount <= 400000) {\\n      tokenRange = 38;\\n    } else if (_amount >= 400001 && _amount <= 500000) {\\n      tokenRange = 39;\\n    } else if (_amount >= 500001 && _amount <= 600000) {\\n      tokenRange = 40;\\n    } else if (_amount >= 600001 && _amount <= 700000) {\\n      tokenRange = 41;\\n    } else if (_amount >= 700001 && _amount <= 800000) {\\n      tokenRange = 42;\\n    } else if (_amount >= 800001 && _amount <= 900000) {\\n      tokenRange = 43;\\n    } else if (_amount >= 900001 && _amount <= 1000000) {\\n      tokenRange = 44;\\n    } else if (_amount >= 1000001 && _amount <= 2000000) {\\n      tokenRange = 45;\\n    } else if (_amount >= 2000001 && _amount <= 3000000) {\\n      tokenRange = 46;\\n    } else if (_amount >= 3000001 && _amount <= 4000000) {\\n      tokenRange = 47;\\n    } else if (_amount >= 4000001 && _amount <= 5000000) {\\n      tokenRange = 48;\\n    } else if (_amount >= 5000001 && _amount <= 6000000) {\\n      tokenRange = 49;\\n    } else if (_amount >= 6000001 && _amount <= 7000000) {\\n      tokenRange = 50;\\n    } else if (_amount >= 7000001 && _amount <= 8000000) {\\n      tokenRange = 51;\\n    } else if (_amount >= 8000001 && _amount <= 9000000) {\\n      tokenRange = 52;\\n    } else if (_amount >= 9000001 && _amount <= 10000000) {\\n      tokenRange = 53;\\n    } else if (_amount >= 10000001 && _amount <= 20000000) {\\n      tokenRange = 54;\\n    } else if (_amount >= 20000001 && _amount <= 40000000) {\\n      tokenRange = 55;\\n    } else if (_amount >= 40000001 && _amount <= 50000000) {\\n      tokenRange = 56;\\n    } else if (_amount >= 50000001 && _amount <= 100000000) {\\n      tokenRange = 57;\\n    } else if (_amount >= 100000001 && _amount <= 500000000) {\\n      tokenRange = 58;\\n    } else if (_amount >= 500000001 && _amount <= 700000000) {\\n      tokenRange = 59;\\n    } else if (_amount >= 700000001) {\\n      tokenRange = 60;\\n    } else {\\n      revert INSUFFICIENT_BALANCE();\\n    }\\n    return tokenRange;\\n  }\\n\\n  /**\\n     @notice Returns the token duration multiplier needed to index into the righteous veBanny mediallion background.\\n     @param _duration Time in seconds corresponding with one of five acceptable staking durations. \\n     The Staking durations below were gleaned from the JBveBanny.sol contract line 55-59.\\n     Returns the duration multiplier used to index into the proper veBanny mediallion on IPFS.\\n  */\\n  function getTokenDuration(uint256 _duration) public pure returns (uint256) {\\n    if (_duration <= 0) {\\n      revert INVALID_DURATION();\\n    }\\n    uint16 _stakeMultiplier = 0;\\n    if (uint256(JBConstants.TEN_DAYS) == _duration) {\\n      _stakeMultiplier = 1;\\n    } else if (uint256(JBConstants.TWENTY_FIVE_DAYS) == _duration) {\\n      _stakeMultiplier = 2;\\n    } else if (uint256(JBConstants.ONE_HUNDRED_DAYS) == _duration) {\\n      _stakeMultiplier = 3;\\n    } else if (uint256(JBConstants.TWO_HUNDRED_FIFTY_DAYS) == _duration) {\\n      _stakeMultiplier = 4;\\n    } else if (uint256(JBConstants.ONE_THOUSAND_DAYS) == _duration) {\\n      _stakeMultiplier = 5;\\n    } else {\\n      revert INVALID_DURATION();\\n    }\\n    return _stakeMultiplier;\\n  }\\n\\n  /**\\n     @notice Computes the specific veBanny IPFS URI  based on the above locked Juicebox token range index and the duration multiplier.\\n     @param _amount Amount of locked Juicebox. \\n     @param _duration Duration in seconds to stake Juicebox.\\n     Returns one of the epic and totally righteous veBanny character IPFS URI the user is entitled to with the aforementioned parameters.\\n    */\\n  function tokenURI(uint256 _amount, uint256 _duration) public pure returns (string memory uri) {\\n    if (_amount <= 0) {\\n      revert INSUFFICIENT_BALANCE();\\n    }\\n    if (_duration <= 0) {\\n      revert INVALID_DURATION();\\n    }\\n    uint256 _tokenRange = getTokenRange(_amount);\\n    uint256 _stakeMultiplier = getTokenDuration(_duration);\\n    return string(abi.encodePacked('ipfs://QmVicV3vNyPKtKxYPPPiVKxaAFa8X2kP5xys6NFhiHf8zj/', Strings.toString(_tokenRange * _stakeMultiplier)));\\n  }\\n}\\n\",\"keccak256\":\"0x547817b2fdc27e66248d4219af4f8cc3994280481f62db90788f9e5a01e03249\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610d2b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806315c9fe87146100465780631efec8601461006c57806392cb829d1461007f575b600080fd5b610059610054366004610b2c565b61009f565b6040519081526020015b60405180910390f35b61005961007a366004610b2c565b610147565b61009261008d366004610b45565b610975565b6040516100639190610bd2565b60008082116100c157604051630c51c95b60e21b815260040160405180910390fd5b600082620d2f0014156100d65750600161013d565b826220f58014156100e95750600261013d565b826283d60014156100fc5750600361013d565b82630149970014156101105750600461013d565b826305265c0014156101245750600561013d565b604051630c51c95b60e21b815260040160405180910390fd5b61ffff1692915050565b600080821161016957604051632858f9ab60e11b815260040160405180910390fd5b60006001831015801561017d575060648311155b1561018a5750600161096f565b6065831015801561019c575060c88311155b156101a95750600261096f565b60c983101580156101bc575061012c8311155b156101c95750600361096f565b61019183101580156101dd57506101f48311155b156101ea5750600461096f565b6101f583101580156101fe57506102588311155b1561020b5750600561096f565b610259831015801561021f57506102bc8311155b1561022c5750600661096f565b6102bd831015801561024057506103208311155b1561024d5750600761096f565b610321831015801561026157506103848311155b1561026e5750600861096f565b610385831015801561028257506103e88311155b1561028f5750600961096f565b6103e983101580156102a357506107d08311155b156102b05750600a61096f565b6107d183101580156102c45750610bb88311155b156102d15750600b61096f565b610bb983101580156102e55750610fa08311155b156102f25750600c61096f565b610fa1831015801561030657506113888311155b156103135750600d61096f565b611389831015801561032757506117708311155b156103345750600e61096f565b61177183101580156103485750611b588311155b156103555750600f61096f565b611b5983101580156103695750611f408311155b156103765750601061096f565b611f41831015801561038a57506123288311155b156103975750601161096f565b61232983101580156103ab57506127108311155b156103b85750601261096f565b61271183101580156103cc5750612ee08311155b156103d95750601361096f565b612ee183101580156103ed57506136b08311155b156103fa5750601461096f565b6136b1831015801561040e5750613e808311155b1561041b5750601561096f565b613e81831015801561042f57506146508311155b1561043c5750601661096f565b61465183101580156104505750614e208311155b1561045d5750601761096f565b614e21831015801561047157506155f08311155b1561047e5750601861096f565b6155f183101580156104925750615dc08311155b1561049f5750601961096f565b615dc183101580156104b357506165908311155b156104c05750601a61096f565b61659183101580156104d45750616d608311155b156104e15750601b61096f565b616d6183101580156104f557506175308311155b156105025750601c61096f565b61753183101580156105165750619c408311155b156105235750601d61096f565b619c418310158015610537575061c3508311155b156105445750601e61096f565b61c3518310158015610558575061ea608311155b156105655750601f61096f565b61ea61831015801561057a5750620111708311155b156105875750602061096f565b62011171831015801561059d5750620138808311155b156105aa5750602161096f565b6201388183101580156105c0575062015f908311155b156105cd5750602261096f565b62015f9183101580156105e35750620186a08311155b156105f05750602361096f565b620186a18310158015610606575062030d408311155b156106135750602461096f565b62030d4183101580156106295750620493e08311155b156106365750602561096f565b620493e1831015801561064c575062061a808311155b156106595750602661096f565b62061a81831015801561066f57506207a1208311155b1561067c5750602761096f565b6207a12183101580156106925750620927c08311155b1561069f5750602861096f565b620927c183101580156106b55750620aae608311155b156106c25750602961096f565b620aae6183101580156106d85750620c35008311155b156106e55750602a61096f565b620c350183101580156106fb5750620dbba08311155b156107085750602b61096f565b620dbba1831015801561071e5750620f42408311155b1561072b5750602c61096f565b620f424183101580156107415750621e84808311155b1561074e5750602d61096f565b621e848183101580156107645750622dc6c08311155b156107715750602e61096f565b622dc6c183101580156107875750623d09008311155b156107945750602f61096f565b623d090183101580156107aa5750624c4b408311155b156107b75750603061096f565b624c4b4183101580156107cd5750625b8d808311155b156107da5750603161096f565b625b8d8183101580156107f05750626acfc08311155b156107fd5750603261096f565b626acfc183101580156108135750627a12008311155b156108205750603361096f565b627a120183101580156108365750628954408311155b156108435750603461096f565b6289544183101580156108595750629896808311155b156108665750603561096f565b62989681831015801561087d57506301312d008311155b1561088a5750603661096f565b6301312d0183101580156108a257506302625a008311155b156108af5750603761096f565b6302625a0183101580156108c757506302faf0808311155b156108d45750603861096f565b6302faf08183101580156108ec57506305f5e1008311155b156108f95750603961096f565b6305f5e10183101580156109115750631dcd65008311155b1561091e5750603a61096f565b631dcd6501831015801561093657506329b927008311155b156109435750603b61096f565b6329b9270183106109565750603c61096f565b604051632858f9ab60e11b815260040160405180910390fd5b92915050565b60606000831161099857604051632858f9ab60e11b815260040160405180910390fd5b600082116109b957604051630c51c95b60e21b815260040160405180910390fd5b60006109c484610147565b905060006109d18461009f565b90506109e56109e08284610c31565b610a0e565b6040516020016109f59190610b67565b6040516020818303038152906040529250505092915050565b606081610a325750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610a5c5780610a4681610c97565b9150610a559050600a83610c1d565b9150610a36565b60008167ffffffffffffffff811115610a7757610a77610d08565b6040519080825280601f01601f191660200182016040528015610aa1576020820181803683370190505b5090505b8415610b2457610ab6600183610c50565b9150610ac3600a86610cb2565b610ace906030610c05565b60f81b818381518110610ae357610ae3610cf2565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610b1d600a86610c1d565b9450610aa5565b949350505050565b600060208284031215610b3e57600080fd5b5035919050565b60008060408385031215610b5857600080fd5b50508035926020909101359150565b7f697066733a2f2f516d5669635633764e79504b744b785950505069564b78614181527f46613858326b5035787973364e4668694866387a6a2f00000000000000000000602082015260008251610bc5816036850160208701610c67565b9190910160360192915050565b6020815260008251806020840152610bf1816040850160208701610c67565b601f01601f19169190910160400192915050565b60008219821115610c1857610c18610cc6565b500190565b600082610c2c57610c2c610cdc565b500490565b6000816000190483118215151615610c4b57610c4b610cc6565b500290565b600082821015610c6257610c62610cc6565b500390565b60005b83811015610c82578181015183820152602001610c6a565b83811115610c91576000848401525b50505050565b6000600019821415610cab57610cab610cc6565b5060010190565b600082610cc157610cc1610cdc565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea164736f6c6343000806000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806315c9fe87146100465780631efec8601461006c57806392cb829d1461007f575b600080fd5b610059610054366004610b2c565b61009f565b6040519081526020015b60405180910390f35b61005961007a366004610b2c565b610147565b61009261008d366004610b45565b610975565b6040516100639190610bd2565b60008082116100c157604051630c51c95b60e21b815260040160405180910390fd5b600082620d2f0014156100d65750600161013d565b826220f58014156100e95750600261013d565b826283d60014156100fc5750600361013d565b82630149970014156101105750600461013d565b826305265c0014156101245750600561013d565b604051630c51c95b60e21b815260040160405180910390fd5b61ffff1692915050565b600080821161016957604051632858f9ab60e11b815260040160405180910390fd5b60006001831015801561017d575060648311155b1561018a5750600161096f565b6065831015801561019c575060c88311155b156101a95750600261096f565b60c983101580156101bc575061012c8311155b156101c95750600361096f565b61019183101580156101dd57506101f48311155b156101ea5750600461096f565b6101f583101580156101fe57506102588311155b1561020b5750600561096f565b610259831015801561021f57506102bc8311155b1561022c5750600661096f565b6102bd831015801561024057506103208311155b1561024d5750600761096f565b610321831015801561026157506103848311155b1561026e5750600861096f565b610385831015801561028257506103e88311155b1561028f5750600961096f565b6103e983101580156102a357506107d08311155b156102b05750600a61096f565b6107d183101580156102c45750610bb88311155b156102d15750600b61096f565b610bb983101580156102e55750610fa08311155b156102f25750600c61096f565b610fa1831015801561030657506113888311155b156103135750600d61096f565b611389831015801561032757506117708311155b156103345750600e61096f565b61177183101580156103485750611b588311155b156103555750600f61096f565b611b5983101580156103695750611f408311155b156103765750601061096f565b611f41831015801561038a57506123288311155b156103975750601161096f565b61232983101580156103ab57506127108311155b156103b85750601261096f565b61271183101580156103cc5750612ee08311155b156103d95750601361096f565b612ee183101580156103ed57506136b08311155b156103fa5750601461096f565b6136b1831015801561040e5750613e808311155b1561041b5750601561096f565b613e81831015801561042f57506146508311155b1561043c5750601661096f565b61465183101580156104505750614e208311155b1561045d5750601761096f565b614e21831015801561047157506155f08311155b1561047e5750601861096f565b6155f183101580156104925750615dc08311155b1561049f5750601961096f565b615dc183101580156104b357506165908311155b156104c05750601a61096f565b61659183101580156104d45750616d608311155b156104e15750601b61096f565b616d6183101580156104f557506175308311155b156105025750601c61096f565b61753183101580156105165750619c408311155b156105235750601d61096f565b619c418310158015610537575061c3508311155b156105445750601e61096f565b61c3518310158015610558575061ea608311155b156105655750601f61096f565b61ea61831015801561057a5750620111708311155b156105875750602061096f565b62011171831015801561059d5750620138808311155b156105aa5750602161096f565b6201388183101580156105c0575062015f908311155b156105cd5750602261096f565b62015f9183101580156105e35750620186a08311155b156105f05750602361096f565b620186a18310158015610606575062030d408311155b156106135750602461096f565b62030d4183101580156106295750620493e08311155b156106365750602561096f565b620493e1831015801561064c575062061a808311155b156106595750602661096f565b62061a81831015801561066f57506207a1208311155b1561067c5750602761096f565b6207a12183101580156106925750620927c08311155b1561069f5750602861096f565b620927c183101580156106b55750620aae608311155b156106c25750602961096f565b620aae6183101580156106d85750620c35008311155b156106e55750602a61096f565b620c350183101580156106fb5750620dbba08311155b156107085750602b61096f565b620dbba1831015801561071e5750620f42408311155b1561072b5750602c61096f565b620f424183101580156107415750621e84808311155b1561074e5750602d61096f565b621e848183101580156107645750622dc6c08311155b156107715750602e61096f565b622dc6c183101580156107875750623d09008311155b156107945750602f61096f565b623d090183101580156107aa5750624c4b408311155b156107b75750603061096f565b624c4b4183101580156107cd5750625b8d808311155b156107da5750603161096f565b625b8d8183101580156107f05750626acfc08311155b156107fd5750603261096f565b626acfc183101580156108135750627a12008311155b156108205750603361096f565b627a120183101580156108365750628954408311155b156108435750603461096f565b6289544183101580156108595750629896808311155b156108665750603561096f565b62989681831015801561087d57506301312d008311155b1561088a5750603661096f565b6301312d0183101580156108a257506302625a008311155b156108af5750603761096f565b6302625a0183101580156108c757506302faf0808311155b156108d45750603861096f565b6302faf08183101580156108ec57506305f5e1008311155b156108f95750603961096f565b6305f5e10183101580156109115750631dcd65008311155b1561091e5750603a61096f565b631dcd6501831015801561093657506329b927008311155b156109435750603b61096f565b6329b9270183106109565750603c61096f565b604051632858f9ab60e11b815260040160405180910390fd5b92915050565b60606000831161099857604051632858f9ab60e11b815260040160405180910390fd5b600082116109b957604051630c51c95b60e21b815260040160405180910390fd5b60006109c484610147565b905060006109d18461009f565b90506109e56109e08284610c31565b610a0e565b6040516020016109f59190610b67565b6040516020818303038152906040529250505092915050565b606081610a325750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610a5c5780610a4681610c97565b9150610a559050600a83610c1d565b9150610a36565b60008167ffffffffffffffff811115610a7757610a77610d08565b6040519080825280601f01601f191660200182016040528015610aa1576020820181803683370190505b5090505b8415610b2457610ab6600183610c50565b9150610ac3600a86610cb2565b610ace906030610c05565b60f81b818381518110610ae357610ae3610cf2565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610b1d600a86610c1d565b9450610aa5565b949350505050565b600060208284031215610b3e57600080fd5b5035919050565b60008060408385031215610b5857600080fd5b50508035926020909101359150565b7f697066733a2f2f516d5669635633764e79504b744b785950505069564b78614181527f46613858326b5035787973364e4668694866387a6a2f00000000000000000000602082015260008251610bc5816036850160208701610c67565b9190910160360192915050565b6020815260008251806020840152610bf1816040850160208701610c67565b601f01601f19169190910160400192915050565b60008219821115610c1857610c18610cc6565b500190565b600082610c2c57610c2c610cdc565b500490565b6000816000190483118215151615610c4b57610c4b610cc6565b500290565b600082821015610c6257610c62610cc6565b500390565b60005b83811015610c82578181015183820152602001610c6a565b83811115610c91576000848401525b50505050565b6000600019821415610cab57610cab610cc6565b5060010190565b600082610cc157610cc1610cdc565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea164736f6c6343000806000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getTokenDuration(uint256)": {
        "params": {
          "_duration": "Time in seconds corresponding with one of five acceptable staking durations.  The Staking durations below were gleaned from the JBveBanny.sol contract line 55-59. Returns the duration multiplier used to index into the proper veBanny mediallion on IPFS."
        }
      },
      "getTokenRange(uint256)": {
        "params": {
          "_amount": "Amount of locked Juicebox.      The range values referenced below were gleaned from the following Notion URL.  https://www.notion.so/juicebox/veBanny-proposal-from-Jango-2-68c6f578bef84205a9f87e3f1057aa37 Returns the token range index or veBanny character commensurate with amount of locked Juicebox."
        }
      },
      "tokenURI(uint256,uint256)": {
        "params": {
          "_amount": "Amount of locked Juicebox. ",
          "_duration": "Duration in seconds to stake Juicebox. Returns one of the epic and totally righteous veBanny character IPFS URI the user is entitled to with the aforementioned parameters."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getTokenDuration(uint256)": {
        "notice": "Returns the token duration multiplier needed to index into the righteous veBanny mediallion background."
      },
      "getTokenRange(uint256)": {
        "notice": "Returns the veBanny character index needed to compute the righteous veBanny on IPFS."
      },
      "tokenURI(uint256,uint256)": {
        "notice": "Computes the specific veBanny IPFS URI  based on the above locked Juicebox token range index and the duration multiplier."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}